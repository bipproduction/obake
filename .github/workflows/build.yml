name: build and deploy

on:
  workflow_dispatch:
    inputs:
      data:
        description: "env"
        required: true
        default: "null"

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: bip
          POSTGRES_PASSWORD: Production_123
          POSTGRES_DB: db
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: run install
        run: |
          bun install

      # === data app ===
      # DATA_NAME
      # DATA_APP_VERSION
      # DATA_NAMESPACE
      # DATA_REPO
      # DATA_BRANCH
      # DATA_ENV
      # DATA_DATE
      # === data upload ===
      # DIR_SOURCE
      # DIR_TARGET
      # DIR_TARGET_PROJECT
      - name: init data
        run: |
          echo "${{ secrets.WIBU_GIT_TOKEN }}" > token.txt
          echo "TOKEN=${{ secrets.WIBU_GIT_TOKEN }}" > .env
          echo "$(cat data-app.txt)" >> $GITHUB_ENV
          echo "$(cat data-upload.txt)" >> $GITHUB_ENV
          echo "TOKEN=${{ secrets.WIBU_GIT_TOKEN }}" >> $GITHUB_ENV
          bun run init-data.ts --data ${{ inputs.data }}

      - name: install global
        run: |
          bun add .

      - name: clone
        run: |
          echo "clone project ..." | bun log-pipe
          git clone https://x-access-token:${{ secrets.WIBU_GIT_TOKEN }}@github.com/bipproduction/${{ env.DATA_REPO }}.git ${{ env.DATA_APP_VERSION }}

      - name: handle env
        working-directory: ${{ env.DATA_APP_VERSION }}
        run: |
          echo "${{ env.DATA_ENV }}" > .env
          echo "handle env ..." | bun log-pipe

      - name: clone and build
        run: |
          echo "clone and build ..." | bun log-pipe
          bun run build.ts

      - name: Deploy to VPS (New Version)
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          source: "${{ env.DIR_SOURCE }}"
          target: "${{ env.DIR_TARGET }}"

      - name: deploy env to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          source: "${{ env.DIR_SOURCE }}/.env"
          target: "${{ env.DIR_TARGET_PROJECT }}"

      - name: manage install on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            echo "manage install on server ..." | bun run log-pipe.ts
            cd ${{ env.DIR_TARGET_PROJECT }}
            bun install --production

      - name: finish
        if: always()
        run: |
          echo "FINISH !" | bun run log-pipe.ts
          bun run log-cli-status.ts false
