name: build and deploy

on:
  workflow_dispatch:
    inputs:
      data:
        description: "data"
        required: true
        default: "null"
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: bip
          POSTGRES_PASSWORD: Production_123
          POSTGRES_DB: db
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: install dependencies
        run: |
          bun install

      - name: clone and build
        run: |
          bun run build.ts --data ${{ secrets.WIBU_GIT_TOKEN }}[x]${{ secrets.FIREBASE }}[x]${{ inputs.data }}
          echo "WIBU_DATA=${{ secrets.WIBU_GIT_TOKEN }}[x]${{ secrets.FIREBASE }}[x]${{ inputs.data }}" >> $GITHUB_ENV

      - name: seed on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            mkdir -p ${{ env.DIR_RELEASES }}

      - name: Deploy to VPS (New Version)
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          source: "${{ env.DIR_SOURCE }}"
          target: "${{ env.DIR_RELEASES }}"

      - name: Deploy env to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          source: "${{ env.DIR_SOURCE }}/.env"
          target: "${{ env.DIR_RELEASES }}/${{ env.DIR_SOURCE }}"

      - name: install on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            cd ${{ env.DIR_RELEASES }}/${{ env.DIR_SOURCE }}
            bun install --production

      - name: db push on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            cd ${{ env.DIR_RELEASES }}/${{ env.DIR_SOURCE }}
            bunx prisma db push

      - name: seed on server
        uses: appleboy/ssh-action@master
        continue-on-error: true
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            cd ${{ env.DIR_RELEASES }}/${{ env.DIR_SOURCE }}
            bunx prisma db seed || echo "[server] tidak membutuhkan seed"

      - name: handle ecosystem config string
        run: |
          echo "WIBU_ECOSYSTEM='$( bun run ecosystem.ts --data ${{ env.WIBU_DATA }} )'" >> $GITHUB_ENV

      - name: create ecosystem config on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            ECOSYSTEM_FILE="${{ env.DIR_TARGET_CWD }}/ecosystem.config.json"
            if [[ ! -f "$ECOSYSTEM_FILE" ]]; then
              echo "${{ env.WIBU_ECOSYSTEM }}" > "$ECOSYSTEM_FILE"
            else
              echo "ecosystem.config.json already exists"
            fi

      - name: create symbolic link
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            ln -sf ${{ env.DIR_RELEASES }}/${{ env.DIR_SOURCE }} ${{ env.DIR_TARGET_CWD}}/current

      - name: send log
        run: |
          bun notif --data ${{ env.WIBU_DATA }} --log

      - name: success
        if: success()
        run: |
          echo "SUCCESS !" 2>&1 | bun notif --data ${{ env.WIBU_DATA }}

      - name: check failed
        if: failure()
        run: |
          echo "FAILED !" 2>&1 | bun notif --data ${{ env.WIBU_DATA }}

      - name: finish
        run: |
          bun notif --data ${{ env.WIBU_DATA }} --finish
