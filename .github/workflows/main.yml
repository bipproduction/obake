name: test jalankan obake
on:
  workflow_dispatch:
    inputs:
      secret:
        description: "secret"
        required: true
        default: "null"
      env:
        description: "env"
        required: true
        default: "null"
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: bip
          POSTGRES_PASSWORD: Production_123
          POSTGRES_DB: db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: config env
        run: |
          echo "${{ inputs.secret }}" >> $GITHUB_ENV
          echo "${{ inputs.env }}" >> $GITHUB_ENV

      - name: Install tree
        run: sudo apt-get update && sudo apt-get install -y tree

      - name: bun install
        run: |
          bun install

      - name: clone repo
        run: |
          git clone https://x-access-token:${{ env.TOKEN }}@github.com/bipproduction/${{ env.REPO }}.git

      - name: repo installation
        working-directory: ${{ env.REPO }}
        run: |
          bun install

      - name: db push
        working-directory: ${{ env.REPO }}
        run: |
          bun prisma db push >> ${{ github.workspace }}/logs.txt 2>&1

      - name: run seeder
        working-directory: ${{ env.REPO }}
        run: |
          bun prisma db seed >> ${{ github.workspace }}/logs.txt 2>&1 || echo "no need seeder" >> ${{ github.workspace }}/logs.txt 2>&1

      - name: build
        working-directory: ${{ env.REPO }}
        run: |
          bun run build >> ${{ github.workspace }}/logs.txt 2>&1

      # Step 2: Generate APP_VERSION dynamically
      - name: Set APP_VERSION
        run: echo "APP_VERSION=${{ github.sha }}---$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      # Ensure project directory exists
      - name: Ensure /var/www/projects/${{ env.APP_NAME }} exists
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            mkdir -p /var/www/projects/${{ env.APP_NAME }}/releases

      # Deploy to a new version directory
      - name: Deploy to VPS (New Version)
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "${{ env.REPO }}/"
          target: "/var/www/projects/${{ env.APP_NAME }}/releases/${{ env.APP_VERSION }}"

      # Step 4: Set BUILD_STATUS based on success or failure
      - name: Set BUILD_STATUS
        if: success()
        run: echo "BUILD_STATUS=success" >> $GITHUB_ENV

      - name: Set BUILD_STATUS on failure
        if: failure()
        run: echo "BUILD_STATUS=failed" >> $GITHUB_ENV

      # Update status log
      - name: Update status log
        if: always()
        run: |
          echo "=====================" >> ${{ github.workspace }}/logs.txt
          echo "BUILD_STATUS=${{ env.BUILD_STATUS }}" >> ${{ github.workspace }}/logs.txt
          echo "APP_NAME=${{ env.APP_NAME }}" >> ${{ github.workspace }}/logs.txt
          echo "=====================" >> ${{ github.workspace }}/logs.txt

      # Upload log to 0x0.st
      - name: Upload log to 0x0.st
        id: upload_log
        if: always()
        run: |
          LOG_URL=$(curl -F "file=@${{ github.workspace }}/logs.txt" ${{ env.UPLOAD_LOG_URL }} )
          echo "LOG_URL=$LOG_URL" >> $GITHUB_ENV

      # Kirim notifikasi ke API
      - name: Notify build success via API
        if: always()
        run: |
          IFS=',' read -ra PHONES <<< "${{ env.WA_PHONE }}"
          for PHONE in "${PHONES[@]}"; do 
            ENCODED_TEXT=$(bun -e "console.log(encodeURIComponent('Build:${{ env.BUILD_STATUS }}\nApp:${{ env.APP_NAME }}\nBranch:${{ env.BRANCH_NAME }}\nLog:${{ env.LOG_URL }}'))")
            curl -X GET "https://wa.wibudev.com/code?text=$ENCODED_TEXT&nom=$PHONE"
          done
