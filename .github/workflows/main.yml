name: test jalankan obake
on:
  workflow_dispatch:
    inputs:
      env:
        description: "env"
        required: true
        default: "null"
      host:
        description: "host"
        required: true
        default: "null"
      username:
        description: "username"
        required: true
        default: "null"
      key:
        description: "key"
        required: true
        default: "null"
      token:
        description: "token"
        required: true
        default: "null"
      app_name:
        description: "app name"
        required: true
        default: "null"
      namespace:
        description: "namespace"
        required: true
        default: "null"
      repo:
        description: "repo"
        required: true
        default: "null"
      branch:   
        description: "branch"
        required: true
        default: "null"
      log_url:
        description: "log url"
        required: true
        default: "null"
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: bip
          POSTGRES_PASSWORD: Production_123
          POSTGRES_DB: db
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      # Step 2: Generate APP_VERSION dynamically
      - name: Set APP_VERSION
        run: echo "APP_VERSION=${{ inputs.branch }}-${{ github.sha }}-$(date +%Y_%m_%d_%H _%M_%S)" >> $GITHUB_ENV

      - name: config env
        run: |
          echo "${{ inputs.env }}" >> $GITHUB_ENV

      - name: bun install
        run: |
          bun install

      - name: clone repo
        run: |
          git clone https://x-access-token:${{ inputs.token }}@github.com/bipproduction/${{ inputs.repo }}.git ${{ env.APP_VERSION }}

      - name: repo installation
        working-directory: ${{ env.APP_VERSION }}
        run: |
          bun install

      - name: db push
        working-directory: ${{ env.APP_VERSION }}
        run: |
          bun prisma db push >> ${{ github.workspace }}/logs.txt 2>&1

      - name: run seeder
        working-directory: ${{ env.APP_VERSION }}
        run: |
          bun prisma db seed >> ${{ github.workspace }}/logs.txt 2>&1 || echo "no need seeder" >> ${{ github.workspace }}/logs.txt 2>&1

      - name: build
        working-directory: ${{ env.APP_VERSION }}
        run: |
          bun run build >> ${{ github.workspace }}/logs.txt 2>&1

      # Ensure project directory exists
      - name: Ensure /var/www/projects/${{ inputs.app_name}} exists
        uses: appleboy/ssh-action@master
        with:
          host: ${{ inputs.host }}
          username: ${{ inputs.username }}
          key: ${{ inputs.key }}
          script: |
            mkdir -p /var/www/projects/${{ inputs.app_name}}/releases

      # Clean unnecessary files
      - name: Clean unnecessary files
        working-directory: ${{ env.APP_VERSION }}
        run: |
          rm -rf .git node_modules

      # Deploy to a new version directory
      - name: Deploy to VPS (New Version)
        uses: appleboy/scp-action@master
        with:
          host: ${{ inputs.host }}
          username: ${{ inputs.username }}
          key: ${{ inputs.key }}
          source: "${{ env.APP_VERSION }}"
          target: "/var/www/projects/${{ inputs.app_name }}/releases/"

      # Set up environment variables
      - name: Set up environment variables
        run: |
          rm -r ${{ env.APP_VERSION }}/.env || echo "no env file"
          echo "${{ inputs.env }}" >> ${{ env.APP_VERSION }}/.env

      # Kirim file .env ke server
      - name: Upload .env to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ inputs.host }}
          username: ${{ inputs.username }}
          key: ${{ inputs.key }}
          source: "${{ env.APP_VERSION }}/.env"
          target: "/var/www/projects/${{ inputs.app_name}}/releases/${{ env.APP_VERSION }}/"

      # manage deployment
      - name: manage deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ inputs.host }}
          username: ${{ inputs.username }}
          key: ${{ inputs.key }}
          script: |

            # Source ~/.bashrc
            source ~/.bashrc

            # Find an available port
            PORT=$(curl -s -X GET https://wibu-bot.wibudev.com/api/find-port | jq -r '.[0]')
            if [ -z "$PORT" ] || ! [[ "$PORT" =~ ^[0-9]+$ ]]; then
              echo "Invalid or missing port from API."
              exit 1
            fi

            # manage deployment
            cd /var/www/projects/${{ inputs.app_name}}/releases/${{ env.APP_VERSION }}

            # Install dependencies
            bun install --production

            # Apply database schema
            if ! bun prisma db push; then
              echo "Database migration failed."
              exit 1
            fi

            # Seed database (optional)
            bun prisma db seed || echo "tidak membutuhkan seed"

            # Restart the application
            pm2 reload ${{ inputs.namespace}} || pm2 start "bun run start --port $PORT" --name "${{ inputs.app_name}}-$PORT" --namespace "${{ inputs.namespace}}"

      # Step 4: Set BUILD_STATUS based on success or failure
      - name: Set BUILD_STATUS
        if: success()
        run: echo "BUILD_STATUS=success" >> $GITHUB_ENV

      - name: Set BUILD_STATUS on failure
        if: failure()
        run: echo "BUILD_STATUS=failed" >> $GITHUB_ENV

      # Update status log
      - name: Update status log
        if: always()
        run: |
          echo "=====================" >> ${{ github.workspace }}/logs.txt
          echo "BUILD_STATUS=${{ env.BUILD_STATUS }}" >> ${{ github.workspace }}/logs.txt
          echo "APP_NAME=${{ inputs.app_name}}" >> ${{ github.workspace }}/logs.txt
          echo "=====================" >> ${{ github.workspace }}/logs.txt

      # Upload log to 0x0.st
      - name: Upload log to 0x0.st
        id: upload_log
        if: always()
        run: |
          LOG_URL=$(curl -F "file=@${{ github.workspace }}/logs.txt" ${{ inputs.log_url }} )
          echo "LOG_URL=$LOG_URL" >> $GITHUB_ENV

      # Kirim notifikasi ke API
      - name: Notify build success via API
        if: always()
        run: |
          IFS=',' read -ra PHONES <<< "${{ env.WA_PHONE }}"
          for PHONE in "${PHONES[@]}"; do 
            ENCODED_TEXT=$(bun -e "console.log(encodeURIComponent('Build:${{ env.BUILD_STATUS }}\nApp:${{ inputs.app_name}}\nBranch:${{ inputs.branch }}\nLog:${{ env.LOG_URL }}'))")
            curl -X GET "https://wa.wibudev.com/code?text=$ENCODED_TEXT&nom=$PHONE"
          done
